insert(key, value, array) {
    s = length(array)
    hashValue = hash(key, s)
    i = 0
    while(i < s and array[(hashValue + i) mod s] != null)
        i += 1
    if(i < s) array[(hashValue + i) mod s] = (key, value)
}

search(key, array) {
    s = length(array)
    i = 0
    while(i < s) {
        if(array[i] = key) return i
        i += 1
    }
    return null
}

import java.util.Optional;
public class OpenAddrHashTable<K, V> implements HashTable<K, V> {
    private final HashProvider<K> hashProvider;
    private OpenAddrPair<K, V>[] array;

    public OpenAddrHashTable(int capacity, HashProvider<K> hashProvider) {
        array = new OpenAddrPair[capacity];
        this.hashProvider = hashProvider;
    }

    public void put(K key, V value) {
        int s = array.length;
        int hashValue = hashProvider.hashKey(key, s);
        int i = 0;
        while (i < s && array[(hashValue + i) % s] != null &&
                !array[(hashValue + i) % s].isDeleted())
            i++;
        if (i < s) array[(hashValue + i) % s] = new OpenAddrPair<>(key, value);
    }

    private int searchPosition(K key) {
        int s = array.length;
        int hashValue = hashProvider.hashKey(key, s);
        int i = 0;
        while (i < s &&
                array[(hashValue + i) % s] != null &&
                !array[(hashValue + i) % s].getKey().equals(key))
            i++;
        return (hashValue + i) % s;
    }

    public Optional<V> get(K key) {
        return Optional.ofNullable(array[searchPosition(key)])
                .filter(kv -> !kv.isDeleted())
                .filter(kv -> kv.getKey().equals(key))
                .map(OpenAddrPair::getValue);
    }

    public void remove(K key) {
        Optional.ofNullable(array[searchPosition(key)])
                .ifPresent(kv -> kv.setDeleted(true));
    }

    public static void main(String[] args) {
        System.out.println("Test");
        OpenAddrHashTable<Integer, String> hashTable = new OpenAddrHashTable<>(10, new RemainderHashing());
        hashTable.put(2, "Test2");
        hashTable.put(12, "Test12");
        hashTable.put(22, "Test22");
        hashTable.put(32, "Test32");
        hashTable.put(42, "Test42");
        hashTable.put(52, "Test52");
        hashTable.put(62, "Test62");
        hashTable.put(72, "Test72");
        hashTable.put(82, "Test82");
        hashTable.put(92, "Test92");
        assertEquals(Optional.empty(), hashTable.get(102));
    }
}
